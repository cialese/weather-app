{"version":3,"sources":["Form.js","Weather.js","Titles.js","App.js","serviceWorker.js","index.js"],"names":["Form","_ref","getWeather","react_default","a","createElement","onSubmit","type","name","placeholder","Weather","country","city","temperature","humidity","wind","description","error","className","Titles","App","state","undefined","_callee","e","API","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","main","temp","sys","speed","weather","t0","console","log","stop","src_Titles","src_Form","this","src_Weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d7c3ecd3.chunk.js","sourcesContent":["import React from 'react';\n\nconst Form = ({ getWeather }) => {\n  return (\n    <form onSubmit={getWeather}>\n      <input type='text' name='city' placeholder='Ciudad' />\n      <input type='text' name='country' placeholder='País' />\n      <button>Ver clima</button>\n    </form>\n  );\n};\n\nexport default Form;\n","import React from 'react';\n\nconst Weather = ({\n  country,\n  city,\n  temperature,\n  humidity,\n  wind,\n  description,\n  error\n}) => (\n  <div className='weather__info'>\n    {city && country && (\n      <p className='weather__key'>\n        {' '}\n        Ubicación:\n        <span className='weather__value'>\n          {' '}\n          {city}, {country}\n        </span>\n      </p>\n    )}\n    {temperature && (\n      <p className='weather__key'>\n        {' '}\n        Temperatura:\n        <span className='weather__value'> {temperature}°C </span>\n      </p>\n    )}\n    {humidity && (\n      <p className='weather__key'>\n        {' '}\n        Humedad:\n        <span className='weather__value'> {humidity}% </span>\n      </p>\n    )}\n    {wind && (\n      <p className='weather__key'>\n        {' '}\n        Viento:\n        <span className='weather__value'> {wind}Km/hr </span>\n      </p>\n    )}\n    {description && (\n      <p className='weather__key'>\n        {' '}\n        Condiciones:\n        <span className='weather__value'> {description} </span>\n      </p>\n    )}\n    {error && <p className='weather__error'>{error}</p>}\n  </div>\n);\n\nexport default Weather;\n","import React from 'react';\n\nconst Titles = () => (\n  <div>\n    <h1 className='title-container__title'>Weather App</h1>\n    <h3 className='title-container__subtitle'>\n      Descubre la temperatura, condiciones climatológicas y más...\n    </h3>\n  </div>\n);\n\nexport default Titles;\n","import React, { Component } from 'react';\nimport Form from './Form';\nimport Weather from './Weather';\nimport Titles from './Titles';\n\nclass App extends Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    wind: undefined,\n    description: undefined,\n    error: undefined\n  };\n\n  getWeather = async e => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    try {\n      const API = await fetch(\n        `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=4c8dd3d3abc442a432a5a6186678f244&units=metric`\n      );\n      const data = await API.json();\n\n      if (city && country) {\n        this.setState({\n          temperature: data.main.temp,\n          city: data.name,\n          country: data.sys.country,\n          humidity: data.main.humidity,\n          wind: data.wind.speed,\n          description: data.weather[0].description,\n          error: ''\n        });\n      } else {\n        this.setState({\n          error: 'Completa los campos'\n        });\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <div className='wrapper'>\n          <div className='main'>\n            <div className='container'>\n              <div className='row'>\n                <div className='col-5 col-xs-12 title-container'>\n                  <Titles />\n                </div>\n                <div className='col-7 col-xs-12 form-container'>\n                  <Form getWeather={this.getWeather} />\n                  <Weather\n                    temperature={this.state.temperature}\n                    humidity={this.state.humidity}\n                    city={this.state.city}\n                    country={this.state.country}\n                    wind={this.state.wind}\n                    description={this.state.description}\n                    error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}